{"version":3,"sources":["ApiClient.js","AddPost.js","EditPost.js","ListPosts.js","LoggedIn.js","Login.js","NotLoggedIn.js","App.js","serviceWorker.js","index.js"],"names":["url","ApiClient","tokenProvider","logoutHandler","this","username","password","console","log","axios","method","header","authorization","data","catch","error","response","status","Promise","reject","resolve","Error","statusText","authenticatedCall","title","tags","text","date","id","AddPost","props","clearCreateForm","setState","state","event","newState","target","name","value","preventDefault","onSubmit","Form","e","submitHandler","Group","controlId","Label","Control","type","onChange","handleChange","as","rows","Button","variant","onClick","React","Component","UpdateEvent","editingPost","_id","clearEditForm","newProps","readOnly","ListPosts","createList","deleteButtonToken","postList","posts","Array","from","map","current","Card","bg","border","key","Body","Title","Subtitle","populateEditForm","deletePost","style","width","bind","LoggedIn","updatePostList","postArray","grabList","client","getPosts","then","returnID","editData","updatePost","alert","newPost","loggedIn","token","createPost","EditPost","logout","Login","disabled","login","NotLoggedIn","App","undefined","window","localStorage","removeItem","getItem","setItem","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6572774f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst url = 'https://frozen-earth-04266.herokuapp.com/postlist/'\r\nconst urlshort = 'https://frozen-earth-04266.herokuapp.com/'\r\n\r\n//const url = 'http://localhost:3000/postlist/'\r\n//const urlshort = 'http://localhost:3000/'\r\n\r\nexport class ApiClient {\r\n  constructor(tokenProvider, logoutHandler) {\r\n    this.tokenProvider = tokenProvider\r\n    this.logoutHandler = logoutHandler\r\n  }\r\n\r\n  async login(username, password) {\r\n    console.log(username, password)\r\n    return await axios({\r\n      method: 'post',\r\n      url: `${urlshort}auth`,\r\n      header: { authorization: this.tokenProvider() },\r\n      data: {\r\n        username,\r\n        password\r\n      }\r\n    });\r\n  }\r\n\r\n  authenticatedCall(method, url, data) {\r\n    return axios({\r\n      method, url, \r\n      header: { authorization: this.tokenProvider() },\r\n      data\r\n    })\r\n      .catch((error) => {\r\n        if (error.response.status === 403) {\r\n          this.logoutHandler();\r\n          return Promise.reject()\r\n        } else { throw error; }\r\n      })\r\n  }\r\n\r\n  status(response) {\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return Promise.resolve(response)\r\n    } else {\r\n      return Promise.reject(new Error(response.statusText))\r\n    }\r\n  }\r\n\r\n  getPosts() {\r\n    return this.authenticatedCall('get', url)\r\n  }\r\n\r\n  newPost(title, tags, text, date) {\r\n    return this.authenticatedCall('post', `${url}create`,\r\n      {\r\n        title,\r\n        tags,\r\n        text,\r\n        date\r\n      })\r\n  }\r\n\r\n  deletePost(id) {\r\n    return this.authenticatedCall('delete', `${url}${id}`)\r\n  }\r\n\r\n  updatePost(id, title, tags, text, date) {\r\n    return this.authenticatedCall('put', `${url}${id}`, { title,\r\n      tags,\r\n      text,\r\n      date })\r\n  }\r\n\r\n  returnID(id) {\r\n    return this.authenticatedCall('get', `${url}${id}`)\r\n  }\r\n\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass AddPost extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: \"\",\r\n            title: \"\",\r\n            tags: [],\r\n            text: \"\",\r\n            date: 0\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        const newState = {};\r\n        newState[event.target.name] = event.target.value;\r\n        this.setState(newState)\r\n    }\r\n\r\n    submitHandler(event) {\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state.title, this.state.tags, this.state.text, );\r\n        this.setState({\r\n            id: \"\",\r\n            title: \"\",\r\n            tags: \"\",\r\n            text: \"\"\r\n        })\r\n    }\r\n\r\n    clearCreateForm = ()=> {\r\n        this.setState({\r\n            id: \"\",\r\n            title: \"\",\r\n            tags: \"\",\r\n            text: \"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <h3>Create Post</h3>\r\n                <Form onSubmit={(e) => this.submitHandler(e)}>\r\n                <Form.Group controlId=\"title\">\r\n                        <Form.Label>Title</Form.Label>\r\n                        <Form.Control name=\"title\" type=\"text\" value={this.state.title} onChange={(e) => this.handleChange(e)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"text\">\r\n                        <Form.Label>Text</Form.Label>\r\n                        <Form.Control name=\"text\" as=\"textarea\" rows=\"4\" value={this.state.text} onChange={(e) => this.handleChange(e)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"tags\">\r\n                        <Form.Label>Tags - Please separate tags with a space and a comma</Form.Label>\r\n                        <Form.Control name=\"tags\" type=\"text\" value={this.state.tags} onChange={(e) => this.handleChange(e)}></Form.Control>\r\n                    </Form.Group>\r\n                <Button variant=\"info\" type=\"submit\">\r\n                        Add Post\r\n                </Button>\r\n                <i>   </i>\r\n                <Button variant=\"info\" onClick={this.clearCreateForm}>\r\n                        Clear\r\n                </Button>\r\n                </Form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPost;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass UpdateEvent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.editingPost._id,\r\n            title: this.props.editingPost.title,\r\n            tags: this.props.editingPost.tags,\r\n            text: this.props.editingPost.text,\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        const newState = {};\r\n        newState[event.target.name] = event.target.value;\r\n        this.setState(newState)\r\n    }\r\n\r\n    submitHandler(event) {\r\n        event.preventDefault();\r\n        this.props.clearEditForm();\r\n        this.props.onSubmit(this.state.id, this.state.title, this.state.tags, this.state.text, this.state.date);\r\n        this.setState({\r\n            id: \"\",\r\n            title: \"\",\r\n            tags: \"\",\r\n            text: \"\",\r\n            date: 0\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(newProps) {\r\n   if (\r\n        newProps !== this.props\r\n    ) {\r\n        //change tags from array to string\r\n        this.setState({\r\n        id: this.props.editingPost._id,\r\n        title: this.props.editingPost.title,\r\n        tags: this.props.editingPost.tags,\r\n        text: this.props.editingPost.text,\r\n    })\r\n}\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <h4>Post Editing Form</h4>\r\n            <p>Click the Edit button on a post, then make changes here.</p>\r\n                <Form onSubmit={(e) => this.submitHandler(e)}>\r\n                    <Form.Group controlId=\"id\">\r\n                        <Form.Label>ID</Form.Label>\r\n                        <Form.Control readOnly name=\"id\" type=\"text\" value={this.state.id} onChange={(e) => this.handleChange(e)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"title\">\r\n                        <Form.Label>Title</Form.Label>\r\n                        <Form.Control name=\"title\" type=\"text\" value={this.state.title} onChange={(e) => this.handleChange(e)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"text\">\r\n                        <Form.Label>Text</Form.Label>\r\n                        <Form.Control name=\"text\" as=\"textarea\" rows=\"4\" value={this.state.text} onChange={(e) => this.handleChange(e)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"tags\">\r\n                    <Form.Label>Tags - Please separate tags with a space and a comma</Form.Label>\r\n                        <Form.Control name=\"tags\" type=\"text\" value={this.state.tags} onChange={(e) => this.handleChange(e)}></Form.Control>\r\n                    </Form.Group>\r\n                   <Button variant=\"info\" type=\"submit\">\r\n                        Save Changes\r\n                </Button>\r\n                   <i>   </i>\r\n                <Button variant=\"info\" onClick={this.props.clearEditForm}>\r\n                        Cancel\r\n                </Button>\r\n                </Form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateEvent;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nclass ListPosts extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n\r\n    }\r\n    this.createList = this.createList.bind(this);\r\n  }\r\n\r\n  createList = () => {\r\n    if (this.props.deleteButtonToken){\r\n        let postList = this.props.posts;\r\n        postList = Array.from(postList)\r\n        return postList.map((current) => (\r\n          <>\r\n          <Card \r\n          bg=\"dark\" border=\"dark\" text=\"light\" \r\n          key={current._id}>\r\n            <Card.Body>\r\n            <Card.Title>\r\n              {current.title}\r\n            </Card.Title>\r\n            <Card.Subtitle>\r\n              Date: {current.date}\r\n            </Card.Subtitle>\r\n            <Card.Body>\r\n              {current.text}\r\n            </Card.Body>\r\n            <br />\r\n          Tags: {current.tags}\r\n           </Card.Body>\r\n          <button onClick={() => this.props.populateEditForm(current._id)}>Edit - make changes in editing form below</button>\r\n          <button onClick={() => this.props.deletePost(current._id)}>Delete</button>\r\n          </Card>\r\n          <hr/>\r\n          </>\r\n        ))  \r\n      } else {\r\n        let postList = this.props.posts;\r\n        postList = Array.from(postList)\r\n        return postList.map((current) => (\r\n          <>\r\n          <Card \r\n          bg=\"secondary\" border=\"secondary\" text=\"light\" style={{ width: '50rem' }}\r\n          key={current._id}>\r\n            <Card.Body>\r\n            <Card.Title>\r\n              {current.title}\r\n            </Card.Title>\r\n            <Card.Subtitle>\r\n              Date: {current.date}\r\n            </Card.Subtitle>\r\n            <Card.Body>\r\n              {current.text}\r\n            </Card.Body>\r\n            <br />\r\n          Tags: {current.tags}\r\n           </Card.Body>\r\n          </Card>\r\n          <hr/>\r\n          </>\r\n        ))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <h1 >The Blog Pile</h1>\r\n          {this.createList()}\r\n        </div>\r\n        <br></br>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListPosts;","import React from 'react';\r\nimport AddPost from './AddPost';\r\nimport EditPost from './EditPost';\r\nimport ListPosts from './ListPosts';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass LoggedIn extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      posts: [\r\n      ],\r\n      editingPost: {\r\n        _id: \" \",\r\n        title: \"\",\r\n        text: \"\",\r\n        tags: \"\",\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.grabList()\r\n  }\r\n\r\n  updatePostList = (response) => {\r\n    const postArray = response.data\r\n    this.setState(() => ({\r\n      posts: postArray\r\n    }));\r\n  }\r\n\r\n  grabList = () => {\r\n    this.props.client.getPosts()\r\n      .then((response) => {\r\n        this.updatePostList(response);\r\n      })\r\n  }\r\n\r\n  createPost(title, tags, text, date) {\r\n    this.props.client.newPost(title, tags, text, date)\r\n      .then((response) => {\r\n        this.grabList(response);\r\n      })\r\n  }\r\n\r\n  populateEditForm = (id) => {\r\n    this.props.client.returnID(id)\r\n    .then((response) => {\r\n      const editData = response.data\r\n      this.setState(() => ({\r\n        editingPost: editData\r\n      }));\r\n    });\r\n  }\r\n\r\n  clearEditForm = () => {\r\n    this.setState(() => ({\r\n      editingPost: {\r\n        _id: \" \",\r\n        title: \"\",\r\n        text: \"\",\r\n        tags: \"\",\r\n      }\r\n    }))\r\n  }\r\n\r\n  updatePost = (id, title, tags, text) => {\r\n    console.log(id, title, tags, text)\r\n    this.props.client.updatePost(id, title, tags, text)\r\n      .then((response) => {\r\n        this.grabList(response);\r\n      })\r\n      .then(this.status)\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.error(error);\r\n        alert(error)\r\n      })\r\n  }\r\n\r\n  deletePost = (id) => {\r\n    this.props.client.deletePost(id)\r\n      .then((response) => {\r\n        this.grabList(response);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ListPosts deleteButtonToken={this.props.deleteButtonToken} loggedIn={this.props.loggedIn} token={this.state.token} client={this.props.client} posts={this.state.posts} deletePost={this.deletePost} populateEditForm={this.populateEditForm}></ListPosts>\r\n        <AddPost onSubmit={(id, title, tags, text, date) => this.createPost(id, title, tags, text, date)} />\r\n        <br></br>\r\n        <hr/>\r\n        <EditPost onSubmit={(id, title, tags, text, date) => this.updatePost(id, title, tags, text, date)} editingPost={this.state.editingPost} clearEditForm={this.clearEditForm}/>\r\n        <br></br>\r\n        <Button variant=\"info\" onClick={this.props.logout} >Logout</Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoggedIn;","import React from 'react';\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      disabled: false\r\n    }\r\n  }\r\n\r\n  submitHandler(e) {\r\n      e.preventDefault();\r\n      this.setState({ disabled: true })\r\n      this.props.client.login(e.target.username.value, e.target.password.value)\r\n      .then((response) => {\r\n        this.setState({ disabled: false });\r\n          this.props.loggedIn(response.data.token)\r\n      })\r\n      .catch(() => {\r\n          alert(\"an error occurred, please try again\");\r\n          this.setState({ disabled: false })\r\n      })\r\n  }\r\n\r\nrender() {\r\n    return (\r\n      <>\r\n        Login<br />\r\n        <form onSubmit={(e) => this.submitHandler(e)} >\r\n          Username<br />\r\n          <input type=\"text\" name=\"username\" disabled={this.state.disabled} /><br />\r\n      Password<br />\r\n          <input type=\"password\" name=\"password\" disabled={this.state.disabled} /><br /><br />\r\n          <button type=\"submit\" disabled={this.state.disabled}> Submit </button>\r\n        </form>\r\n      </>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport ListPosts from './ListPosts';\r\nimport Login from './Login';\r\n\r\nclass NotLoggedIn extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      posts: [\r\n\r\n      ]\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.grabList()\r\n  }\r\n\r\n  updatePostList = (response) => {\r\n    const postArray = response.data\r\n    this.setState(() => ({\r\n      posts: postArray\r\n    }));\r\n  }\r\n\r\n  grabList = () => {\r\n    this.props.client.getPosts()\r\n      .then((response) => {\r\n        this.updatePostList(response);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Login loggedIn={this.props.loggedIn} client={this.props.client} ></Login>\r\n        <ListPosts deleteButtonToken={this.props.deleteButtonToken} loggedIn={this.props.loggedIn} token={this.state.token} client={this.props.client} posts={this.state.posts} deletePost={this.deletePost}></ListPosts>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NotLoggedIn;","import React from 'react';\r\nimport { ApiClient } from './ApiClient';\r\nimport LoggedIn from './LoggedIn';\r\nimport NotLoggedIn from './NotLoggedIn';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.scss';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      token: window.localStorage.getItem(\"token\"),\r\n    }\r\n    this.client = new ApiClient(\r\n      () => this.state.token, () => this.logout() \r\n      )\r\n  }\r\n\r\n  login(token) {\r\n    window.localStorage.setItem(\"token\", token);\r\n    this.setState({ token })\r\n  }\r\n\r\n  logout = (token) => {\r\n    this.setState({ token: undefined })\r\n    window.localStorage.removeItem(\"token\");\r\n  }\r\n\r\n render() {\r\n    if (this.state.token) {\r\n    return <LoggedIn deleteButtonToken={this.state.token} loggedIn={(token) => this.login(token)} token={this.state.token} client={this.client} logout={this.logout} />  }\r\n    \r\n    return <NotLoggedIn deleteButtonToken={this.state.token} loggedIn={(token) => this.login(token)} token={this.state.token} client={this.client} ></NotLoggedIn>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}